[ 성당과 시장 ] - 에릭 레이먼드 지음

I. 위키백과

에릭 레이먼드가 쓴 〈성당과 시장〉(The Cathedral and the Bazaar)은 자유 소프트웨어 철학을 대변하는 유명한 글이다. 
레이먼드는 이 글에서 리눅스 커널 개발과정과 패치메일이라는 오픈 소스 프로젝트를 개발한 경험을 들어 오픈 소스 개발 방식의 유효성을 설명한다. 
1997년 5월 27일 리눅스 회의에서 처음 공개되었으며, 1999년 같은 이름의 책에 포함되어 출판되었다.

글에서 저자는 두 가지 방식의 자유 소프트웨어 개발 모델을 대조한다.

성당 모델: 출시 때에만 소스 코드를 공개하고 그 사이에는 제한된 개발자들만 소스 코드에 접근할 수 있다. 
GNU 이맥스와 GNU 컴파일러 모음이 예이다.

시장 모델: 소스 코드가 인터넷으로 일반에 공개된 상태로 개발된다. 
레이몬드는 리눅스 커널 프로젝트의 리더인 리누스 투르발스가 이 방식을 발명해 냈다고 쓰고 있다. 
그는 또한 페치메일 프로젝트에 자신이 이 모델을 적용한 이야기도 쓰고 있다.

글의 주제는 그가 리누스 법칙이라고 이름붙인 "보는 눈만 많다면, 어떤 버그라도 쉽게 잡을 수 있다"는 명제이다. 
이 말은 많은 사람이 테스트하고 훑어보고 실험해 볼 수 있도록 코드가 공개되어 있으면 버그는 빨리 잡힐 것이란 뜻이다. 
이에 대해 성당 모델에서는 소스 코드를 여러 명의 개발자들만 볼 수 있으므로 버그를 잡는데에 엄청난 시간과 노력이 든다고 주장했다.

이 글로 인해 GNU 이맥스와 GCC를 포함한 많은 오픈 소스와 자유 소프트웨어 프로젝트들이 시장식의 열린 개발 모델을 사용하게 되었다. 
이 중 가장 유명한 것은 넷스케이프가 넷스케이프 커뮤니케이터의 소스를 공개한 것과 모질라 프로젝트를 시작한 것이다.
성당 모델은 상용 소프트웨어의 전형적인 개발 방식이다. 더욱이 상용 소프트웨어는 보통 출시 때 소스가 같이 제공되지 않는다. 
그래서 "시장과 성당"이라는 구문은 종종 상용 소프트웨어와 오픈 소스 소프트웨어를 비유하는 데에 쓰인다. 
그러나 원래 글에서는 자유 소프트웨어들 중에 두 종류를 비교하여 설명하고 상용 소프트웨어에 대한 언급은 없었다.

성당과 시장의 예는 소프트웨어 프로젝트에만 있는 것이 아니다. 
위키백과는 시장식의 프로젝트이고, 누피디아나 브리태니커 백과사전은 성당형의 프로젝트이다.


II. 성당과 시장의 일부 내용 발췌

< 해커란 누구인가? >

「자곤 파일」에는 ‘해커’에 대한 많은 정의가 포함되어 있다. 
대부분 문제를 해결하고, 한계를 극복하는 기술적인 숙련도와 명석함에 초점을 맞춘다. 
하지만 여러분이 해커가 되는 방법을 알고 싶다면 기술과 마음가짐, 이 두 가지가 실제적으로 중요하다.

숙련된 프로그래머와 네트워크 전문가가 문화를 공유하는 공동체가 있다.
그 시초는 최초의 시분할 미니컴퓨터와 아르파넷 (ARPANET: Advanced Research Projects Agency NETwork)을
사용하던 수십 년 전으로 거슬러 올라간다. 이 문화의 구성원이 바로 ‘해커’라는 말의 기원이다. 
해커는 인터넷을 만들었고, 현재와 같은 형태의 유닉스 운영체제를 만들었다. 
또한 해커는 유즈넷을 운영하고 WWW를 움직인다. 
만약 여러분이 이러한 문화에 속해 있거나 이러한 문화에 기여한 바가 있다면, 
그리고 이 문화에 속해 있는 사람들이 여러분을 알고 여러분을 해커라고 부르고 있다면 
다름이 아닌 여러분이 바로 해커인 것이다.

해커의 사고방식은 소프트웨어 해커 문화에 국한되지 않는다. 
예를 들어, 해커의 마음가짐으로 전자공학이나 음악과 같은 분야에 관심을 쏟는 사람도 있으며, 
실제로 최고 수준의 예술과 과학 분야에서 이런 모습을 찾아 볼 수 있다. 
소프트웨어 해커는 그들과 유사한 생각을 가진 사람들이 있다는 것을 인정하며, 
그런 사람들 역시 해커라 부를 수 있다. 
그리고 어떤 해커들은 해커의 본질은 해커가 일하는 특정분야나 수단과는 관계가 없다고 주장한다. 
그러나 이 글에서는 범위를 한정해 소프트웨어 해커의 기술과 마음가짐, 
그리고 해커라는 말의 기원이 된 공유 문화의 전통에 대해 알아보기로 하자.

실제로는 그렇지 않지만 자신을 해커라 부르는 또 다른 집단이 있다. 
이들은 주로청소년기의 남자 아이들로 구성되며 컴퓨터 시스템에 침입하거나, 
전화를 무료로 사용할 수 있도록 조작하는 일을 한다. 
하지만 진짜 해커는 이들을 ‘크래커cracker’라 부르며 그들과 관계하는 것을 원치 않는다. 
해커 대부분은 크래커를 게으르고 무책임하며 명석하지 않다고 생각한다. 
철사를 이용해 자동차 시동을 건다고 해서 자동차 엔지니어가 되는 것이 아닌 것처럼 
시스템의 보안을 뚫을 수 있다고 해서 해커가 되는 것은 아니다. 

하지만 많은 언론과 작가들이 크래커를 해커라는 단어로 부르며, 진짜 해커들은 이 부분을 항상 못 마땅하게 생각한다.
해커는 무엇인가를 만드는 사람이지만, 크래커는 무엇인가를 파괴하는 사람이라는 것이 해커와 크래커의 근본적인 차이다.

만약 해커가 되고 싶다면 이 글을 계속 읽어야 되지만 크래커가 되기 원한다면,
alt.2600 뉴스그룹의 글을 읽은 뒤 5∼10년 정도의 세월을 교도소에서 보내고 나서야 
스스로가 얼마나 바보 같았는지 깨달을 수 있을 것이다. 이것이 내가 크래커에 대해 하고 싶은 이야기의 전부다.

< 해커의 마음가짐 >

해커는 문제를 해결하고 무엇인가를 만들어 내며, 자유와 자발적인 상호 협력을 믿는다. 
해커로 인정받으려면 이런 마음가짐을 가진 것처럼 행동해야 한다. 
그리고 진심으로 이런 마음가짐으로 행동해야 한다.
하지만 단지 해커 문화 안에서 인정받으려고 이런 태도를 취한다면, 중요한 부분을 간과한 것이다. 
그러한 것들을 믿는 사람이 된다는 것은 여러분 자신이 학습하는데 도움이 되고 지속적인 동기를 제공할 수 있기 때문에 중요한 일이다. 
모든 창조적인 분야가 그렇듯이 대가가 되는 가장 효과적인 방법은 
다음 선시禪詩와 같이 대가의 품성과 태도뿐만 아니라 감정적인 부분까지도 그대로 모방하는 것이다.

길을 따르다
대가를 보고,
대가를 따르고,
대가와 함께 걷고,
대가의 눈으로 보면,
대가가 될 수 있다
해커가 되기를 바란다면 다음 것들을 믿을 때까지 반복하라.

1. 이 세상은 풀어야 할 매력적인 문제로 가득 차 있다

해커가 되는 것은 매우 재미있는 일이지만, 많은 노력이 필요하다. 이 노력에는 동기부여가 필요하다. 
성공한 운동 선수는 자신의 신체를 단련하거나 육체적 한계를 극복함으로써 얻는 기쁨이 동기가 된다. 
이처럼 해커가 되려면 문제를 해결하고 자신의 기술을 숙련시키고 지적 능력을 단련하는 데서 오는 원초적인 희열을 느낄 수 있어야 한다.
만약 이런 느낌을 가질 수 없는 사람이라면, 노력해야 한다! 
이런 감정을 느낄 수 있어야 해커가 될 수 있다. 그렇지 않다면 여러분의 해킹 에너지는 돈, 명성 같은 유혹에 약해질 수 있다.
(또한 문제를 해결하는 데 필요한 모든 사항을 알지 못하더라도 일부분을 해결하면 그것을 통해 
나머지 부분도 순차적으로 해결할 수 있다는 스스로의 학습 능력에 대한 확신을 해커가 될 때까지 증진시켜 나가야 한다.)

2. 동일한 문제를 반복해서 풀어서는 안 된다

창조적인 두뇌는 소중하고 한정된 자원이다. 
새롭게 해결해야 할 매력적인 문제가 많이 있는데, 이러한 자원을 이미 해결된 문제를 다시 해결하는 데 소모해서는 안된다.
해커처럼 행동하려면 다른 해커의 연구 시간도 소중하다는 사실을 알아야 한다. 
정보를 공유하는 것과 다른 해커가 오래된 문제를 다시 해결하지 않고 새로운 문제를 해결할 수 있도록 
자신이 해결한 문제의 답을 다른 해커에게 공개하는 것은 도덕적인 의무다.

'문제를 반복해서 풀어서는 안 된다'는 말은 모든 문제에 적용되는 것이 아니라 
주어진 문제의 올바른 해법이 하나 밖에 없을 때 적용된다. 
간혹 우리는 해법을 공부하기 전에는 풀 수 없었던 문제에서 많은 것을 배운다. 
이런 경우에는 문제를 여러번 풀어 보는 것이 도움이 된다. 

하지만 사람들로 하여금 바퀴를 다시 발명하게 하는 것같이 
좋은 해법을 재사용하지 못하게 하는 기술이나 법률, 폐쇄소스 코드와 같은 제도적 장벽이 문제가 된다.
(창조적 성과물을 모두 공개한다면 다른 해커로부터 최상의 존경을 받겠지만, 
이것이 자신의 성과물을 모두 공개해야만 한다는 의미는 아니다. 
숙식을 해결하거나 컴퓨터를 사용하는 등의 생계를 유지하려고 
자신의 성과를 유료로 판매하는 것은 해커의 가치나 윤리에 전혀 어긋나지 않는다. 
또한 가족을 부양하거나 돈을 벌기 위해 자신의 해킹 기술을 이용하는 것도 
그 일을 하는 동안 자신이 해커라는 사실을 망각하지 않는다면 문제될 것이 없다.)

3. 권태와 단순 반복은 죄악이다

일반적으로 창조적인 사람과 해커는 권태를 느끼거나 미련하게 반복하는 작업을 해서는 안 된다. 
이러한 것들은 새로운 문제를 해결할 수 없게 만들기 때문이다. 
이런 자원의 낭비는 모든 사람에게 유감스러운 일이다. 
그렇게 때문에 권태와 단조로운 작업은 단순히 불쾌할 뿐만 아니라 죄악과도 같다.
해커로 행동하려면 자신만이 아니라 모든 사람, 특히 다른 해커를 위해 자동화로
가능한 한 모든 반복 요소를 없앨 수 있다고 믿어야 한다.
(그러나 이러한 부분에도 한 가지 분명한 예외가 있다. 해커는 때때로 의심 가는 부분을 확인
하거나 기술을 익히기 위해, 혹은 다른 방법으로는 얻을 수 없는 경험을 얻으려고 반복적이고 
지루한 일을 하기도 한다. 하지만 이는 스스로의 선택이기 때문에 그 누구도 지루한 일을 강요 받아서는 안 된다.)

4. 자유는 좋은 것이다

해커는 본질적으로 권위주의를 좋아하지 않는다. 여러분에게 명령을 내릴 수 있는 사람이 있다면, 
여러분이 매력을 느껴 해결하고자 하는 문제를 풀지 못하도록 중단시킬 수 있다. 
또한 권위주의 방식으로 이루어진 일은 일반적으로 끔찍하게 어리석은 이유로 시작되기도 한다. 
어디에서든 권위주의적인 태도를 발견하면 다른 해커가 질식하지 않도록 맞서 싸워야 한다.

(이는 모든 권위에 맞서 싸우라는 말이 아니다. 아이와 범죄자는 격리할 필요가 있다. 
해커가 권위에 의한 명령을 따름으로써 동일한 시간에 자신이 원하는 것보다 많은 것을 얻어낼 수 있다면, 
그런 권위를 따르는 것에 동의할 수 있다. 하지만 이러한 형태는 제한되고 의식적인 타협일 뿐 권위에 굴복하는 형태가 돼서는 안 된다.)
권위주의자는 검열과 비밀을 통해 세력을 확장한다. 자발적인 협력과 정보의 공유를 믿지 않고 통제에 의한 협력만을 신뢰한다. 
그렇기 때문에 해커로서 행동하려면 검열과 비밀, 그리고 자신의 의지에 반대되는 행동을 강제하는 데 사용하는 무력이나
기만에 반감을 가져야 한다. 그리고 그러한 신념을 가지고 기꺼이 행동해야 한다.

5. 해커는 마음가짐이 아니라 능력이 있어야 한다

해커가 되려면 앞서 설명한 마음가짐을 가져야 한다. 하지만 이러한 태도를 가졌다고 해서 모두가 해커가 되는 것은 아니다. 
운동 챔피언이나 록스타가 마음만 가지고 되는 것은 아니다. 
해커가 되려면 지식과 노력, 헌신 그리고 많은 노동이 필요하다.

그러므로 올바른 자세만 가지면 된다는 생각을 버리고 모든 종류의 능력을 존중해야 한다. 
해커는 시간을 낭비해서는 안 되고 어떠한 능력을 추구하는 것은 좋지만 특히 해킹 능력을 추구해야 한다. 
소수의 사람만이 정통할 수 있는 기술을 가지는 것은 좋은 일이다. 
더욱이 정신적인 예리함과 기술 그리고 집중이 필요한 기술을 가진다면 최고의 해커가 될 수 있다.

만약 여러분이 능력을 외경한다면, 스스로가 그런 능력을 가질 수 있도록 노력하는 것을 즐겨보라. 
힘든 작업과 일에 전념하면 힘들고 단조로운 일을 진지한 놀이로 만들어 줄 것이다. 
이러한 자세가 여러분을 해커로 만들어 줄 것이다.

< 해킹 기술의 기초 >

해커의 마음가짐도 중요하지만 기술은 더욱 중요하다. 마음가짐이 능력을 대신할 수는 없다. 
해커가 되려면 다음과 같은 기술을 기본적으로 가져야 한다.

새로운 기술이 개발되고 기존의 기술이 낡고 쓸모 없어지면서 기술의 경향은 서서히 바뀌어 간다. 
예를 들어, 예전에는 기계어를 이용해서 프로그래밍하는 것이 기본적인 해킹 기술이었지만 지금은 HTML을 사용한다. 
그렇기에 현 시점에서는 다음이 필요하다.

1. 프로그래밍을 배우자
당연히 프로그램을 만드는 법을 배우는 것이 해킹의 기장 기본적인 기술이다. 
만일 여러분이 컴퓨터 언어를 전혀 접해본 적이 없다면 파이썬 Python을 배울 것을 추천한다. 
파이썬은 간결하게 설계되어 있으며 잘 정리된 문서를 구하기 쉽고 초보자에게 적합하다. 
처음 시작하기에 좋은 언어지만 결코 장난감 같은 언어가 아니라 매우히 써둔 글이 있다. 
파이썬 웹 사이트에도 좋은 입문서가 있다.

자바Java도 초보자에게 적합한 언어로 추천했었지만, 「처음 배우는 프로그래밍 언어로서의 자바가 가지는 위험」
이라는 글을 읽고 생각을 바꾸게 되었다.
해커는 ‘철물점에 있는 배관공’과 같은 방식의 문제 해결 방법을 가질 수 없기 때문에 
어떤 구성 요소가 실제로 어떻게 동작하는지 알아야 한다. 
그렇기 때문에 이제는 C와 리스프LISP를 먼저 배운 뒤에 자바를 배워야 한다고 생각한다.

여기에는 좀 더 일반화된 이야기가 있다. 어떤 컴퓨터 언어가 배우기 어렵다면, 
그 언어는 아마도 생산성은 좋지만 배우기는 어려운 언어일 것이다. 
언어뿐 아니라 웹 애플리케이션 프레임워크 또한 같은 문제가 있다. 루비온레일스RubyOnRails, CakePHP,
장고Django를 이용하면 어려운 문제에 당면하거나 해결 방법을 수정할 때 매우 쉽게 사용할 수 있다.

진지하게 프로그래밍을 하고 싶다면, 유닉스의 핵심 언어인 C를 배워야 한다.
C++는 C와 깊은 관계가 있다. 둘 중 하나를 알면 나머지 하나는 어렵지 않게 배울수 있다. 
두 언어 모두 첫 번째 언어로 좋은 언어는 아니다. 
사실 C로 프로그래밍을 하지 않을수록 생산성은 높아질 것이다.

C는 매우 효율적이고 컴퓨터의 자원을 효과적으로 사용한다. 
하지만 C를 효과적으로 사용하려면 메모리와 같은 자원을 저수준에서 직접 관리해 주어야 한다. 
저수준 코드는 복잡하고 버그가 생기기 쉬우며 디버깅하는데 엄청난 시간이 필요하다.
근래의 컴퓨터는 매우 강력하기 때문에 이 부분이 상당히 아쉽게 느껴진다. 
그렇기 때문에 파이썬 같이 컴퓨터를 효율적으로 사용할 수 있는 언어로 작업하는 것이 효과적이다.

해커에게 중요한 또 다른 언어는 펄Perl과 리스프다. 펄은 실용적인 이유로 배울 필요가 있다. 
동적인 웹 페이지와 시스템 관리 등에 펄이 매우 폭넓게 사용되기 때문에 펄로 프로그램을 작성하지 않더라도 코드를 읽을 수 있어야 한다. 
많은 사람이 펄을 이런 식으로 사용한다. 

나는 시스템 최적화가 필요하지 않은 작업에는 C 대신 파이썬을 사용할 것을 권한다. 
여러분은 해당 코드를 이해할 수 있어야 한다.
리스프는 다른 이유로 배워야 할 필요가 있다. 리스프를 배우면 엄청난 경험을 가질 수 있다. 
리스프를 그리 많이 사용하지 않는다 하더라도 이런 경험은 남은 여생동안 여러분을 더 좋은 프로그래머로 지낼 수 있게 해 줄 것이다. 

이맥스Emacs의 편집 모드나 김프GIMP의 Script-Fu 부가기능plug-in을 작성하거나 수정하면서 리스프를 쉽게 배울 수 있다.
사실 파이썬, C/C++, 자바, 펄, 리스프 이 5가지의 언어를 모두 익히는 것이 최선이다. 
이 언어들이 가장 중요한 해킹 언어라는 점 이외에도 각각 다른 방식으로 프로그램을 작성하기 때문에 
프로그램에 접근하는 다양한 방법을 가르쳐 줄 것이다.

해커 수준의 기술에 도달하지 못했거나 단순히 여러 개 언어를 익힌 프로그래머라면, 
특정한 하나의 언어로부터 독립해서 일반적인 문제 해결 방법을 배울 필요가 있다. 
진정한 해커가 되려면 이미 아는 방식과 연관 지어 새로운 언어를 며칠 안에
배울 수 있는 수준까지 도달해야 한다. 이 말은 몇 가지 매우 다른 언어를 배워야만 한다는 의미다.

어떤 식으로 프로그래밍하는 법을 배워야 하는 지는 매우 복잡하기 때문에 이 글에서 설명하기는 힘들다. 
하지만 책과 수업으로 배울 수 없다는 것은 말해줄 수 있다. 많은 수의, 아마도 대부분의 해커들이 스스로 생각한다. 
언어의 기능적인 부분은 책에서 일부 배울 수 있지만 아는 것을 살아 있는 기술로 만드는 사고방식은 연습과 시간으로만 배울 수 있다. 

프로그래밍하는 방법을 배우려면 (1) 코드를 읽고, (2) 써보아야 한다.
구글의 최고수 해커이자 AI 분야에서 널리 사용되는 교과서의 공동 저자 피터 노빅 Peter Norvig은 
「10년 안에 프로그래밍 정복하기」라는 훌륭한 글을 썼다.

프로그래밍을 배우는 것은 컴퓨터 언어가 아닌 일반적인 언어의 작문을 배우는 것과 같다. 
좋은 프로그램을 만드는 방법은 대가가 만든 코드를 읽고 자신이 직접 프로그램을 만들어 보는 것이다. 
또한 스스로 생각했던 바를 힘과 효율성을 갖춰 개발할 수 있을 때까지 다른 여러 소스를 읽고 작성해보는 작업을 계속 반복해 보아야 한다.
초보 해커가 읽고 수정할 수 있으면서 소스 형태로 되어 있는 대형 프로그램은 거의 없기 때문에 
참고할 만한 좋은 코드를 찾는 것은 그리 쉬운 일은 아니다. 

하지만 상황이 극적으로 변해 지금은 해커가 만든 오픈소스 소프트웨어와 프로그래밍 도구, 운영체제가 널리 퍼져 있다. 
따라서 소스 코드를 쉽게 구할 수 있다.

2. 오픈소스 유닉스 중 하나를 구해서 배우고 운영해 보자
우선 여러분이 개인용 컴퓨터가 있거나 이와 유사한 시스템을 사용할 수 있다는 전제로 이야기해 보려고 한다. 
(사실 해커 문화의 초기에는 개인이 컴퓨터를 가지기에는 컴퓨터가 매우 비쌌지만 지금은 그렇지 않다.) 
초심자들이 해킹 기술을 익힐 수 있는 가장 확실한 첫 번째 단계는 리눅스나 BSD 유닉스 중 하나를 구해 
개인용 컴퓨터에 설치한 뒤에 이를 운영해 보는 것이다.

이 세상에는 유닉스 이외에도 많은 운영체제가 있지만, 
이런 운영체제는 바이너리 형태로만 배포되기 때문에 소스 코드를 확인하거나 수정할 수 없다. 
마이크로소프트 윈도우나 소스가 공개되지 않은 다른 운영체제가 설치된 시스템에서 해킹을 배우려는 것은 
마치 깁스를 하고 춤을 배우려는 것과 같다.맥 OS X에서도 가능하지만 시스템 중 일부만 오픈소스이기 때문에 많은 장벽을 만날 것이다. 
또한 애플이 독점하는 코드에 의존하는 좋지 않은 습관이 들지 않도록 주의해야 한다. 
유닉스 시스템 내부를 공부하는 데 집중한다면 많은 것을 배울 수 있다.

유닉스는 인터넷의 운영체제다. 유닉스를 모르는 상태라도 인터넷을 배울 수 있다.
하지만 유닉스를 이해하지 못하면 인터넷 해커가 될 수 없다. 
이런 이유로 오늘날의 해커 문화는 유닉스를 중심으로 이루어져 있다. 
(이 말이 항상 옳지는 않다. 오랜 해커 중 일부는 여전히 이 부분에 불만을 토로한다. 
그러나 유닉스와 인터넷의 공생 관계는 마이크로소프트도 그 관계를 약화시키지 못할 정도로 꾸준히 강화되어 왔다.)

유닉스를 사용해 보자. 나는 리눅스를 좋아하지만 여러 가지 다른 선택을 할 수 있다. 
(물론 리눅스와 마이크로소프트 윈도우를 한 컴퓨터에서 동시에 사용할 수도 있다.) 
배우고 운영하고 고쳐보며 인터넷에서 이러한 과정을 이야기해보자. 코드를 읽고 수정해 보자. 
(C, 리스프, 파이썬, 펄을 포함해) 마이크로소프트 운영체제에서 더 좋은 프로그래밍 도구를 접할 수 있으며, 즐거움을 가질 수 있다. 
대가들의 뒤를 따르며 배워가다 보면 자신이 생각하는 것보다 더 많은 지식을 흡수하게 될 것이다.
유닉스를 더 배우고 싶으면 「로지나타카Loginataka」와 「유닉스 프로그래밍의 예술 The Art of Unix Programming」05을 읽어 보자.

리눅스는 ‘리눅스 온라인’ 사이트에서 구할 수 있다. 또한 지역 리눅스 사용자 모임 LUG: Linux User's Group에서 설치에 대한 도움을 받을 수 있다.
모든 리눅스 배포판은 초보자의 입장에서 볼 때 거의 동등하다고 나는 지난 10년간 이 글에서 말해왔다. 
그러나 2006∼2007년 사이에 우분투Ubuntu가 최고의 선택으로 부각됐다. 

다른 배포판이 자신만의 영역에서 세력을 키워오는 동안 우분투는 리눅스 초보가 가장 쉽게 접근할 수 있는 배포판이 되었다. 
하지만 우분투의 데스크톱 인터페이스는 수년 동안 흉측한데다 사용이 쉽지 않은 ‘유니티Unity’를 기본으로 채용해 왔다. 
그렇기 때문에 주분투Xubuntu나 쿠분투Kubuntu와 같은 변종의 사용을 권하고 싶다.
BSD 유닉스에 대한 정보와 자원은 www.bsd.org에서 구할 수 있다.

첫발을 내딛는 가장 좋은 방법은 하드 디스크에 설치할 필요 없이 필요한 모든 것이 들어있는 라이브CD를 이용해 부팅해보는 것이다. 
CD-ROM의 속도 때문에 라이브CD를 이용하는 것은 매우 느리지만, 특별한 조치 없이 많은 것을 둘러볼 수 있는 방법 중 하나다. 
또한 나는 「유닉스와 인터넷 기초 HOWTO」라는 소개 글을 쓰기도 했다.

나는 초심자에게 리눅스나 BSD 설치를 혼자 해보라고 권하지 않았었다. 
요즘은 초심자도 모든 과정을 혼자 할 수 있을 만큼 설치 프로그램이 좋아졌다. 
하지만 나는 여전히 지역 리눅스 사용자 모임에 도움을 청하고 연락하는 것이 좋다고 생각한다.
어렵지 않을 뿐 아니라 여러 문제를 해결하는 데 도움을 받을 수 있다

3. WWW를 사용하는 방법과 HTML을 작성하는 방법을 배워보자

해커 문화가 만들어 온 대부분의 것은 눈에 보이지 않게 움직이며 공장과 사무실, 대학이 일반인의 삶에서 문제없이 돌아가도록 도와준다. 
해커들의 빛나는 커다란 작품인 웹은 하나의 큰 예외로 정치인들조차 웹 때문에 세상이 바뀌어 가는 것을 인정한다. 
다른 많은 이유가 있지만 이 한 가지 사실만으로도 웹이 어떤 식으로 작동하는지를 배울 필요가 있다.

웹의 작동 방법을 배운다는 것은 누구나 할 수 있는 브라우저 이용법을 배우는 것이 아니라 
웹의 마크업 언어인 HTML(HyperText Markup Language)을 작성하는 방법을 배운다는 뜻이다. 
만일 여러분이 프로그램을 작성하는 방법을 모른다면 HTML 작성이 프로그램을 이해할 수 있는 사고방식을 기르는 데 약간의 도움이 될 수 있다. 
따라서 HTML을 이용해서 홈페이지를 만들어 보자. 
그리고 고전적인 HTML보다 명확한 언어인 XHTMLeXtensible HyperText Markup Language을 지킬 수 있게 노력해 보자.
(http://htmldog.com/에서 초심자에게 좋은 지침서를 참고할 수 있다.)

그러나 단지 홈페이지를 만드는 것으로 해커가 되는 일에 근접하는 것은 아니다.
웹은 많은 홈페이지로 가득 차 있으며 별다른 가치가 없거나 내용이 없는 경우가 많다. 
(http://catb.org/~esr/html-hell.html에서 바람직하지 않은 예를 참고할 수 있다.)
홈페이지를 가치 있게 만들려면 의미 있는 내용이 있어야 하며, 다른 해커들에게
흥미나 도움을 줄 수 있어야 한다. 그럼 이제 다음 주제로 넘어가 보자.

4. 영어에 익숙하지 않으면 영어를 배우자

나는 미국인이며 영어를 모어로 사용하기 때문에 제국주의 문화의 하나로 보여질 듯해서 영어 학습을 권하는 것을 주저했다. 
하지만 다른 언어를 사용하는 여러 사람이 영어가 해커 문화와 인터넷의 공용어이며, 해커 공동체에서 일익을 담당하려면 
영어를 알아야 한다는 사실을 알리라고 충고해 주었다

1991년에 나는 모어가 아닌 두 번째 언어로서 기술적인 대화를 영어로 하는 해커가 많다는 것을 알게 되었다. 
당시에는 어떤 언어보다 영어에 기술적인 어휘가 많았기 때문에 영어가 작업 수단으로 가장 좋은 언어였다. 
유사한 이유로 영어로 쓰여진 기술 책의 번역은 가끔 불만족스러웠다.

핀란드인 리누스 토르발스Linus Torvalds는 코드의 주석을 영어로 작성했다. 
듣자 하니 다른 경우에는 그렇게 한 적이 없다고 한다. 토르발스의 유창한 영어는 전세계적인
리눅스 개발자 공동체를 만드는데 중요한 역할을 했다. 이것은 참고해 볼만한 예다.
원어민처럼 말할 수 있게 된다고 해서 해커가 되는 데 필요한 글쓰기 능력이 있다는 것을 보증하지는 않는다. 
반 문맹에 가깝고, 문법에 맞지 않고, 철자 오류 때문에 난해한 글을 쓴다면 나를 포함한 많은 해커가 여러분을 무시할 것이다. 
엉성한 작문은 엉성한 생각에서 비롯되며, 이 둘의 상관관계를 쉽게 찾을 수 있기 때문에
엉성하게 생각하는 사람을 좋아하지 않는다. 
능숙하게 글을 쓰지 못한다면 글 쓰는 법을 배워야 한다.